import unittest
from Node import *


class TestLca(unittest.TestCase):
    def testDagAddingNodes(self):
        graph = DAG()
        graph.addNode(1)
        graph.addNode(2)
        graph.addNode(3)
        graph.addNode(4)
        graph.addNode(5)
        graph.addNode(6)
        graph.addNode(7)
        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(2, 4)
        graph.addEdge(2, 5)
        graph.addEdge(3, 6)
        graph.addEdge(3, 7)

        self.assertEqual(1, graph.getNode(1).key)
        self.assertEqual(2, graph.getNode(2).key)
        self.assertEqual(3, graph.getNode(3).key)
        self.assertEqual(4, graph.getNode(4).key)
        self.assertEqual(5, graph.getNode(5).key)
        self.assertEqual(6, graph.getNode(6).key)
        self.assertEqual(7, graph.getNode(7).key)

        self.assertIsNone(graph.getNode(8))
        self.assertIsNone(graph.getNode(9))
        self.assertIsNone(graph.getNode(10))
        self.assertIsNone(graph.getNode(11))
        self.assertIsNone(graph.getNode(12))
        self.assertIsNone(graph.getNode(13))
        self.assertIsNone(graph.getNode(14))
        self.assertIsNone(graph.getNode(15))

    def testDagNodeChildren(self):
        graph = DAG()
        graph.addNode(1)

        graph.addNode(2)
        graph.addNode(3)
        graph.addNode(4)
        graph.addNode(5)
        graph.addNode(6)
        graph.addNode(7)

        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(1, 4)

        graph.addEdge(2, 5)
        graph.addEdge(2, 6)
        graph.addEdge(3, 5)
        graph.addEdge(3, 6)
        graph.addEdge(4, 5)
        graph.addEdge(4, 6)

        graph.addEdge(5, 7)
        graph.addEdge(6, 7)

        self.assertFalse(graph.isChild(1, 1))
        self.assertTrue(graph.isChild(2, 1))
        self.assertTrue(graph.isChild(3, 1))
        self.assertTrue(graph.isChild(4, 1))
        self.assertTrue(graph.isChild(5, 1))
        self.assertTrue(graph.isChild(6, 1))
        self.assertTrue(graph.isChild(7, 1))

        self.assertFalse(graph.isChild(2, 2))
        self.assertTrue(graph.isChild(5, 2))
        self.assertTrue(graph.isChild(6, 2))
        self.assertTrue(graph.isChild(7, 2))

        self.assertFalse(graph.isChild(3, 3))
        self.assertTrue(graph.isChild(5, 3))
        self.assertTrue(graph.isChild(6, 3))
        self.assertTrue(graph.isChild(7, 3))

        self.assertFalse(graph.isChild(4, 4))
        self.assertTrue(graph.isChild(5, 4))
        self.assertTrue(graph.isChild(6, 4))
        self.assertTrue(graph.isChild(7, 4))

        self.assertFalse(graph.isChild(5, 5))
        self.assertTrue(graph.isChild(7, 5))

        self.assertFalse(graph.isChild(6, 6))
        self.assertTrue(graph.isChild(7, 6))

        self.assertFalse(graph.isChild(7, 7))

    def testDagAddingEdges(self):
        graph = DAG()
        graph.addNode(1)
        graph.addNode(2)
        graph.addNode(3)
        graph.addNode(4)
        graph.addNode(5)
        graph.addNode(6)
        graph.addNode(7)
        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(2, 4)
        graph.addEdge(2, 5)
        graph.addEdge(3, 6)
        graph.addEdge(3, 7)
        self.assertTrue(graph.edgeExists(1, 2))
        self.assertTrue(graph.edgeExists(1, 3))
        self.assertTrue(graph.edgeExists(2, 4))
        self.assertTrue(graph.edgeExists(2, 5))
        self.assertTrue(graph.edgeExists(3, 6))
        self.assertTrue(graph.edgeExists(3, 7))
        self.assertFalse(graph.edgeExists(1, 4))
        self.assertFalse(graph.edgeExists(1, 5))
        self.assertFalse(graph.edgeExists(2, 6))
        self.assertFalse(graph.edgeExists(2, 7))
        self.assertFalse(graph.edgeExists(3, 4))
        self.assertFalse(graph.edgeExists(3, 5))

    def testGetParents(self):
        graph = DAG()
        graph.addNode(1)
        graph.addNode(2)
        graph.addNode(3)
        graph.addNode(4)
        graph.addNode(5)
        graph.addNode(6)
        graph.addNode(7)
        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(2, 4)
        graph.addEdge(2, 5)
        graph.addEdge(3, 6)
        graph.addEdge(3, 7)
        self.assertEqual([(1, 0)], graph.getListOfParentNodes(1))
        self.assertEqual([(2, 0), (1, 1)], graph.getListOfParentNodes(2))
        self.assertEqual([(3, 0), (1, 1)], graph.getListOfParentNodes(3))
        self.assertEqual([(4, 0), (2, 1), (1, 2)], graph.getListOfParentNodes(4))
        self.assertEqual([(5, 0), (2, 1), (1, 2)], graph.getListOfParentNodes(5))
        self.assertEqual([(6, 0), (3, 1), (1, 2)], graph.getListOfParentNodes(6))
        self.assertEqual([(7, 0), (3, 1), (1, 2)], graph.getListOfParentNodes(7))

    def testLCA(self):
        graph = DAG()
        graph.addNode(1)
        graph.addNode(2)
        graph.addNode(3)
        graph.addNode(4)
        graph.addNode(5)
        graph.addNode(6)
        graph.addNode(7)
        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(2, 4)
        graph.addEdge(2, 5)
        graph.addEdge(3, 6)
        graph.addEdge(3, 7)
        self.assertEqual(1, graph.findLCA(1, 7))
        self.assertEqual(1, graph.findLCA(1, 6))
        self.assertEqual(1, graph.findLCA(1, 5))
        self.assertEqual(1, graph.findLCA(1, 4))
        self.assertEqual(1, graph.findLCA(1, 3))
        self.assertEqual(1, graph.findLCA(1, 2))
        self.assertEqual(1, graph.findLCA(1, 1))

        self.assertEqual(1, graph.findLCA(2, 7))
        self.assertEqual(1, graph.findLCA(2, 6))
        self.assertEqual(2, graph.findLCA(2, 5))
        self.assertEqual(2, graph.findLCA(2, 4))
        self.assertEqual(1, graph.findLCA(2, 3))
        self.assertEqual(2, graph.findLCA(2, 2))

        self.assertEqual(3, graph.findLCA(3, 7))
        self.assertEqual(3, graph.findLCA(3, 6))
        self.assertEqual(1, graph.findLCA(3, 5))
        self.assertEqual(1, graph.findLCA(3, 4))
        self.assertEqual(3, graph.findLCA(3, 3))
        self.assertEqual(1, graph.findLCA(3, 2))

        self.assertEqual(1, graph.findLCA(4, 7))
        self.assertEqual(1, graph.findLCA(4, 6))
        self.assertEqual(2, graph.findLCA(4, 5))
        self.assertEqual(4, graph.findLCA(4, 4))

        self.assertEqual(1, graph.findLCA(5, 7))
        self.assertEqual(1, graph.findLCA(5, 6))
        self.assertEqual(5, graph.findLCA(5, 5))

        self.assertEqual(3, graph.findLCA(6, 7))
        self.assertEqual(6, graph.findLCA(6, 6))

    def testDagValidInput(self):
        graph = DAG()
        self.assertTrue(graph.addNode(1))
        self.assertTrue(graph.addNode(2))
        self.assertTrue(graph.addNode(3))
        self.assertTrue(graph.addNode(4))
        self.assertTrue(graph.addNode(5))
        self.assertTrue(graph.addNode(6))
        self.assertTrue(graph.addNode(7))
        self.assertTrue(graph.addEdge(1, 2))
        self.assertTrue(graph.addEdge(1, 3))
        self.assertTrue(graph.addEdge(2, 4))
        self.assertTrue(graph.addEdge(2, 5))
        self.assertTrue(graph.addEdge(3, 6))
        self.assertTrue(graph.addEdge(3, 7))

    def testDagValidDuplicateInput(self):
        graph = DAG()
        graph.addNode(1)
        graph.addNode(2)
        graph.addNode(3)
        graph.addNode(4)
        graph.addNode(5)
        graph.addNode(6)
        graph.addNode(7)
        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(2, 4)
        graph.addEdge(2, 5)
        graph.addEdge(3, 6)
        graph.addEdge(3, 7)
        self.assertFalse(graph.addNode(1))
        self.assertFalse(graph.addNode(2))
        self.assertFalse(graph.addNode(3))
        self.assertFalse(graph.addNode(4))
        self.assertFalse(graph.addNode(5))
        self.assertFalse(graph.addNode(6))
        self.assertFalse(graph.addNode(7))
        self.assertFalse(graph.addEdge(1, 2))
        self.assertFalse(graph.addEdge(1, 3))
        self.assertFalse(graph.addEdge(2, 4))
        self.assertFalse(graph.addEdge(2, 5))
        self.assertFalse(graph.addEdge(3, 6))
        self.assertFalse(graph.addEdge(3, 7))

    #tests to see if the addition of edges that would make the graph cyclic are not allowed
    def testDagCyclicInput(self):
        graph = DAG()
        graph.addNode(1)
        graph.addNode(2)
        graph.addNode(3)
        graph.addNode(4)
        graph.addNode(5)
        graph.addNode(6)
        graph.addNode(7)
        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(2, 4)
        graph.addEdge(2, 5)
        graph.addEdge(3, 6)
        graph.addEdge(3, 7)
        self.assertFalse(graph.addEdge(4, 1))
        self.assertFalse(graph.addEdge(5, 1))
        self.assertFalse(graph.addEdge(6, 1))
        self.assertFalse(graph.addEdge(7, 1))

        self.assertFalse(graph.addEdge(4, 2))
        self.assertFalse(graph.addEdge(5, 2))

        self.assertFalse(graph.addEdge(6, 3))
        self.assertFalse(graph.addEdge(7, 3))


